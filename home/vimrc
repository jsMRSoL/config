set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ajmwagar/vim-deus'
Plugin 'edkolev/tmuxline.vim'
Plugin 'tomasiser/vim-code-dark'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


"Airline tweaks
"   let g:airline_left_sep='>'
"   let g:airline_right_sep='<'
    let g:airline_detect_modified=1
    let g:airline_detect_paste=1
    let g:airline_detect_spell=1
    let g:airline_detect_spelllang=1
    let g:airline_powerline_fonts=1
    let g:airline#extensions#tmuxline#enabled=1

"Tmuxline tweaks
    let g:tmuxline_powerline_separators=0
    let g:tmuxline_separators = {
        \ 'left' : '',
        \ 'left_alt': '>',
        \ 'right' : '',
        \ 'right_alt' : '<',
        \ 'space' : ' '}

"Ultisnips config
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<c-b>"
    let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"

"fzf plugin
    set rtp+=~/.fzfsrc

" Customize fzf colors to match your color scheme
let g:fzf_colors =
 \ { 'fg':      ['fg', 'Normal'],
   \ 'bg':      ['bg', 'Normal'],
   \ 'hl':      ['fg', 'Comment'],
   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
   \ 'hl+':     ['fg', 'Statement'],
   \ 'info':    ['fg', 'PreProc'],
   \ 'border':  ['fg', 'Ignore'],
   \ 'prompt':  ['fg', 'Conditional'],
   \ 'pointer': ['fg', 'Exception'],
   \ 'marker':  ['fg', 'Keyword'],
   \ 'spinner': ['fg', 'Label'],
   \ 'header':  ['fg', 'Comment'] }

"Call fzf
    nnoremap <leader>f :FZF<CR>

"Basics
    set nocompatible
    set showmode
    set number
    set relativenumber
    syntax on
    set cursorline
    set nowrap

"Set control keys
    let mapleader = ","
    let maplocalleader = "\\"
    inoremap jk <Esc>
    nnoremap <F2> :set invpaste paste?<CR>
    set pastetoggle=<F2>
    nnoremap <F3> :set invnumber<CR>:set invrelativenumber<CR>
    nnoremap <F4> :%s//g<Left><Left>
    map <F6> :setlocal spell! spelllang=en_gb<CR>

"NERDtree bindings
    nnoremap <C-n> :NERDTreeToggle<CR>

"Source .vimrc
    nnoremap <leader>sv :source ~/.vimrc<CR>
    nnoremap <leader>ev :tabe ~/.vimrc<CR>

"Folding 
    nnoremap <space> za
    
"Tabs
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set shiftround 

"Colours
    set t_Co=256
    set t_ut=
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"    set background=dark " Setting dark mode
    colorscheme codedark

"Searches
    set ignorecase
    set smartcase
    set incsearch
    set showmatch
    set hlsearch
    nnoremap <leader><space> :noh<CR>

"Splits at bottom and right
    set splitright
    set splitbelow

"Easier line traversing
    nnoremap H 0
    nnoremap L $

"Marker jumping
    nnoremap <leader>n /<++><Enter>"_c4l
    nnoremap <leader>p ?<++><Enter>"_c4h
    inoremap <leader>n <Esc>/<++><Enter>"_c4l
    inoremap <leader>p <Esc>?<++><Enter>"_c4h

"Compile latex document
    autocmd FileType tex inoremap <F5> <Esc>:!pdflatex<space>%<Enter>a
    autocmd FileType tex nnoremap <F5> :!pdflatex<space>%<Enter>

"Templates
    if has("autocmd")
        augroup templates
            autocmd BufNewFile *.* silent! execute '0r ~/.config/vim/templates/skeleton.'.expand("<afile>:e")
        augroup END
    endif

"Dictionary test
    if has ("autocmd")
        au FileType * execute 'setlocal dict+=~/.vim/mydictionaries/'.&filetype.'.txt'
    endif

"Write to urlview
    nnoremap <leader>u :w<Home>silent <End> !urlview<CR>

"Wrap in double-symbols
    vnoremap <leader>2 di""<Esc>Pf"
    vnoremap <leader>9 di()<Esc>Pf)
    vnoremap <leader>[ di[]<Esc>Pf]
    vnoremap <leader>{ di{}<Esc>Pf}

"Easy pair symbols
    inoremap <leader>' ''<Esc>i
    inoremap <leader>" ""<Esc>i
    inoremap <leader>[ []<Esc>i
    inoremap <leader>( ()<Esc>i
    inoremap <leader>{ {}<Esc>i
    inoremap <leader>* **<Esc>i
    inoremap <leader>+ ++<Esc>i
    inoremap <leader>= ==<Esc>i

"Move outside the paired symbols
    inoremap <leader>l <Esc>la

"Move lines up and down
    nnoremap <leader><Down> ddjP
    nnoremap <leader><Up> ddkP

"Insert lines
    nnoremap <leader>o o<Esc>k
    nnoremap <leader>O O<Esc>j

"Delete lines
    nnoremap <leader>do jddk
    nnoremap <leader>dO kdd

"Delete trailing whitespace
    nnoremap <leader>w :%s/\s\+$//<CR>

"Insert mode text processing
    inoremap <c-d> <Esc>ddo

"Yank to system clipboard
    vnoremap <leader>c :w !xsel -b<CR><CR>
    nnoremap <leader>c :.w !xsel -b<CR><CR>

"Typo commands
    cmap Q q

"Typo typos
    iabbrev waht what
    iabbrev tehn then
    iabbrev adn and

