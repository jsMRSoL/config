" VUNDLE {{{
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and
" initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-markdown'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'junegunn/fzf.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ajmwagar/vim-deus'
Plugin 'edkolev/tmuxline.vim'
Plugin 'tomasiser/vim-code-dark'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'jceb/vim-orgmode'
Plugin 'mattn/calendar-vim'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-repeat'
Plugin 'vim-scripts/utl.vim'
Plugin 'vim-scripts/taglist.vim'
Plugin 'vim-scripts/Tagbar'
Plugin 'vim-scripts/SyntaxRange'
Plugin 'chriskempson/base16-vim'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" }}} " Put your non-Plugin stuff after this line
"Airline tweaks {{{
"   let g:airline_left_sep='>'
"   let g:airline_right_sep='<'
    let g:airline_detect_modified             = 1
    let g:airline_detect_paste                = 1
    let g:airline_detect_spell                = 1
    let g:airline_detect_spelllang            = 1
    let g:airline_powerline_fonts             = 1
    let g:airline#extensions#tmuxline#enabled = 1
" }}}
"Tmuxline tweaks {{{
    let g:tmuxline_powerline_separators=0
    let g:tmuxline_separators = {
        \ 'left'      : '',
        \ 'left_alt'  : '>',
        \ 'right'     : '',
        \ 'right_alt' : '<',
        \ 'space'     : ' '}
" }}}
"Ultisnips config {{{
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
    let g:UltiSnipsExpandTrigger       = "<tab>"
    let g:UltiSnipsJumpForwardTrigger  = "<c-b>"
    let g:UltiSnipsJumpBackwardTrigger = "<c-z>"

" If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit          = "vertical"
    let g:UltisnipsSnippetsDir        = "/home/simon/.vim/customsnips"
    let g:UltiSnipsSnippetDirectories = ["UltiSnips", "/home/simon/.vim/customsnips"]
    cmap USE UltiSnipsEdit
" }}}
" orgmode config  {{{
    let g:org_heading_shade_leading_stars = 1
    let g:org_indent                      = 1
    let g:org_aggressive_conceal          = 1    |" Should ensure all inline markups are hidden. Experimental!
" }}}
" Vim-markdown config {{{
        let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
" }}}
" table mode config {{{
    let g:table_mode_corner_corner = '+'
" }}}
" NERDTree config  {{{
    let g:NERDTreeHijackNetrw = 0
" "--------------------------------------------------------------------------}}}
" dragvisuals config {{{
     vmap  <expr>  <LEFT>   DVB_Drag('left') 
     vmap  <expr>  <RIGHT>  DVB_Drag('right')
     vmap  <expr>  <DOWN>   DVB_Drag('down') 
     vmap  <expr>  <UP>     DVB_Drag('up')   
     vmap  <expr>  D        DVB_Duplicate()  
" }}}
"myplugindir {{{
    set rtp+=~/.vim/bundle/uplooker
" }}}
"fzf plugin {{{
    set rtp+=~/.fzfsrc

" Customize fzf colors to match your color scheme
let g:fzf_colors =
 \ { 'fg':      ['fg', 'Normal'],
   \ 'bg':      ['bg', 'Normal'],
   \ 'hl':      ['fg', 'Comment'],
   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
   \ 'hl+':     ['fg', 'Statement'],
   \ 'info':    ['fg', 'PreProc'],
   \ 'border':  ['fg', 'Ignore'],
   \ 'prompt':  ['fg', 'Conditional'],
   \ 'pointer': ['fg', 'Exception'],
   \ 'marker':  ['fg', 'Keyword'],
   \ 'spinner': ['fg', 'Label'],
   \ 'header':  ['fg', 'Comment'] }
" }}}
"Basics {{{
    set nocompatible
    set showmode
    set number
    set relativenumber
    syntax on
    set belloff=all
    set cursorline
    set backspace=indent,start,eol
    set wildmenu
    set shortmess+=I
" }}}
"Set control keys {{{
    " Leader keys
    let mapleader = ","
    let maplocalleader = "\\"
    " Esc mappings for all modes
    inoremap jk <Esc>
    vnoremap jk <Esc>
    cnoremap jk <Esc>
    " Paste issue dodge
    nnoremap <F2> :set invpaste paste?<CR>
    set pastetoggle=<F2>
    nnoremap <F3> :set invnumber<CR>:set invrelativenumber<CR>
    nnoremap <F4> :%s//g<Left><Left>
    map <F6> :setlocal spell! spelllang=en_gb<CR>
    set mouse=a
    "Cursor settings
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
    "Screen jumps
    nnoremap <C-k> H        |" Jump to top of viewport
    nnoremap <C-j> L        |" Jump to bottom of viewport
    " Problem keys
    nmap K  <nop>
    cnoremap <C-a> <Home>   |" To allow easy jump to start of command line
    cnoremap <C-e> <End>    |" Already seems to work but wth.
    " File navigation
    cmap    BOF    browse oldfiles
    nmap    ##      :b#<CR> |" Jump to last open file
    set switchbuf=usetab    |" switch to already open buffer
    set hidden              |" enables hiding (as yet) unsaved buffer
" }}}
" Manage vim's internal files  {{{
" Prevent write-permissions errors
if exists('$SUDO_USER')
    set nobackup
    set nowritebackup
else
    set backupdir=~/.vim/tmp/backup
    set backupdir+=.
endif
" Keep swapfiles out of the way
  " creates a path based on the current buffer's path
if exists('$SUDO_USER')
    set noswapfile
else
    set directory=~/.vim/tmp/swap//
    set directory+=.
endif
" Manage undo files for root and normal user
if exists('$SUDO_USER')
    set noundofile
else
    set undodir=~/.vim/tmp/undo
    set undodir+=.
    set undofile
endif
" Manage viminfo file
if exists('$SUDO_USER')
    set viminfo=
else
    if isdirectory(expand('~/.vim'))
        " name of viminfo file must be last argument
        set viminfo='1000,f1,<500,n~/.vim/viminfo
    endif
endif

if !empty(glob('~/.vim/viminfo'))
      if !filereadable(expand('~/.vim/viminfo'))
            echoerr 'warning: ~/.vim/viminfo exists but is not readable'
      endif
endif
"}}}
" vinaigrette  {{{
    nnoremap -  :edit <C-R>=empty(expand('%')) ? '.' : expand('%:p:h')<CR><CR>
"--------------------------------------------------------------------------}}}
"Call fzf {{{
    nnoremap <leader>ff :Files ~/<CR>
    nnoremap <leader>fv :Files ~/.vim/<CR>
" }}}
"NERDtree bindings {{{
    nnoremap <C-n> :NERDTreeToggle<CR>
" }}}
"Source .vimrc {{{
    nnoremap <leader>sv :source ~/.vimrc<CR>
    nnoremap <leader>ev :tabe ~/.vimrc<CR>
" }}}
"Folding  {{{
    nnoremap <space> za
" }}}
"Tabs / Line breaking/ Format options  {{{
    "Tabs
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set shiftround
    set smarttab    " Enables <BS> for dedenting.
    " Linebreaks and wrapping
    set linebreak
    set textwidth=78
    set wrap
    " Indenting
    set autoindent
    set breakindent
    set breakindentopt=shift:2
    let &showbreak = '⤷ '
    " Format options
    " previous options croql
    set formatoptions=qljn
    set nojoinspaces        |" Don't insert two spaces after J
    " Highlighting
    set highlight+=@:ColorColumn
    set highlight+=N:DiffText
    execute 'highlight link EndOfBuffer ColorColumn'
    " Brackets
    set noshowmatch         |" Don't jump between match brackets. Too annoying.
    " Screenupdating
    set lazyredraw          |" Turns off screenupdating during macro playback
    " Scrolling
    set scrolloff=3
    " Lists
    set list
    set listchars=nbsp:⊘
    set listchars+=tab:‣∙
    set listchars+=extends:⁍
    set listchars+=precedes:⁌
    set listchars+=trail:∘
" }}}
"Colours {{{
    set t_Co=256
    set t_ut=
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"    set background=dark " Setting dark mode
    colorscheme base16-tomorrow-night
    function! ToggleColorCol()
        if !exists('w:ToggledColorCol')
            let w:ToggledColorCol = 0
        endif
        if w:ToggledColorCol == '0'
            set colorcolumn=78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103
            let w:ToggledColorCol = 1
            echom 'colorcolumn enabled'
        else
            set colorcolumn=
            let w:ToggledColorCol = 0
            echom 'colorcolumn off'
        endif
    endfunction
    nnoremap <leader>cc :call ToggleColorCol()<CR>
" }}}
"Searches {{{
    set ignorecase
    set smartcase
    set incsearch
    set showmatch
    set hlsearch
    nnoremap <leader><space> :noh<CR>
" }}}
"Splits at bottom and right {{{
    set splitright  " Moves focus right with split
    set splitbelow  " Moves focus down with split
" }}}
"Easier line traversing {{{
    nnoremap H 0
    nnoremap L $
" }}}
"Marker jumping  {{{
    nnoremap <leader>n /<++><Enter>"_c4l
    nnoremap <leader>p ?<++><Enter>"_c4h
    inoremap <leader>n <Esc>/<++><Enter>"_c4l
    inoremap <leader>p <Esc>?<++><Enter>"_c4h
" }}}
"Compile latex document {{{
    augroup filetype_tex
        autocmd!
        autocmd FileType tex inoremap <F5> <Esc>:!pdflatex<space>%<Enter>a
        autocmd FileType tex nnoremap <F5> :!pdflatex<space>%<Enter>
    augroup END
" }}}
"Templates  {{{
    augroup templates
        autocmd!
        autocmd BufNewFile *.* silent! execute '0r ~/.config/vim/templates/skeleton.'.expand("<afile>:e")
    augroup END
" }}}
"Dictionary test  {{{
    augroup mydictionary
        autocmd!
        autocmd FileType * execute 'setlocal dict+=~/.vim/mydictionaries/'.&filetype.'.txt'
    augroup END
" }}}
"Per filetype abbreviations  {{{
    augroup filetype_vim
        autocmd!
        autocmd FileType vim setlocal foldmethod=marker
        autocmd FileType vim    :iabbrev <buffer> vcm   \|"
    augroup END

    augroup filetype_py
        autocmd!
        autocmd FileType python    :iabbrev <buffer> iff if:<left>
        "mapping to comment out python lines
        autocmd FileType python    nnoremap <buffer> <localleader>cm I#<Esc>
    augroup END

    augroup filetype_js
        autocmd!
        autocmd FileType javascript    :iabbrev <buffer> iff if ()<left>
    augroup END

    augroup filetype_latin
        autocmd!
        autocmd BufNew,BufRead *.ltn setlocal filetype=latin
    augroup END

    augroup filetype_markdown
        autocmd!
        autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    augroup END

    augroup filetype_org
        autocmd!
        autocmd FileType org :imap <buffer> <S-CR>    <Esc><S-CR>
    augroup END
" }}}
" Handle links  {{{
    " write to urlview
    nnoremap <leader>uv :w<Home>silent <End> !urlview<CR>
    nnoremap <leader>ut :Utl<CR>
" }}}
" Line manipulation  {{{
"Move lines up and down
    nnoremap <leader><Down> ddp
    nnoremap <leader><Up> ddkP
    nnoremap <localleader>j ddp
    nnoremap <localleader>k ddkP
"Insert lines
    nnoremap <leader>o o<Esc>k
    nnoremap <leader>O O<Esc>j
"Delete lines
    nnoremap <leader>do jddk
    nnoremap <leader>dO kdd
" }}}
"Delete trailing whitespace {{{
    nnoremap <leader>w :%s/\s\+$//<CR>
" }}}
"Insert mode text processing {{{
    inoremap SS     <Esc>S      |" Clear line
    inoremap II     <Esc>I      |" Move to start of line
    inoremap AA     <Esc>A      |" Move to end of line
" }}}
"Yank to system clipboard {{{
    vnoremap <leader>cp :w !xsel -b<CR><CR>
    nnoremap <leader>cp :.w !xsel -b<CR><CR>
" }}}
"TYPOS {{{
    iabbrev waht what
    iabbrev tehn then
    iabbrev adn and
" }}}
" NETRW tweak {{{
    let g:netrw_liststyle    = 0
    let g:netrw_banner       = 0
    let g:netrw_browse_split = 0
" }}}
" Custom box commenting {{{
function! CommentBlock(comment, ...)
    "If 1 or more opt args, first opt arg is
    let introducer = a:0 >= 1 ? a:1 : "#"

    "If 2 or more opt args, 2nd opt arg is
    let box_char = a:0 >= 2 ? a:2 : "*"

    "If 3 or more opt args, 3rd opt arg is
    let width = a:0 >= 3 ? a:3 : len(a:comment)+5

    " Build the comment box and put the comment inside it...
    return introducer . repeat(box_char,width) . "\<CR>"
    \    . introducer . " " . a:comment . "\<CR>"
    \    . introducer . repeat(box_char,width) . "\<CR>"
endfunction

" Python /Shell comment box insertion map
    imap <silent> ###   <C-R>=CommentBlock(input("Enter comment: "),'#','#')<CR>

